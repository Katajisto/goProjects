{"version":3,"sources":["timer.js","App.js","serviceWorker.js","index.js"],"names":["Timer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","time","timerOn","tick","bind","assertThisInitialized","start","restart","reset","stop","handleDelete","console","log","setState","_this2","interval","setInterval","clearInterval","delete","num","react_default","a","createElement","id","className","timeLim","Math","floor","onClick","Component","App","timerList","newId","showSettings","addTimer","del","handleSettings","tempList","i","length","splice","concat","toConsumableArray","event","target","value","timers","map","x","timer","key","onChange","handleChange","type","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ca457015.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Timer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      time: 0,\r\n      timerOn: false\r\n    };\r\n    this.tick = this.tick.bind(this);\r\n    this.start = this.start.bind(this);\r\n    this.restart = this.reset.bind(this);\r\n    this.stop = this.stop.bind(this);\r\n    this.handleDelete = this.handleDelete.bind(this);\r\n  }\r\n  tick() {\r\n    console.log(\"tick\");\r\n    if (this.state.timerOn) {\r\n      this.setState({\r\n        time: this.state.time + 1\r\n      });\r\n    }\r\n  }\r\n  start() {\r\n    this.setState({ timerOn: true });\r\n  }\r\n  stop() {\r\n    this.setState({ timerOn: false });\r\n  }\r\n  reset() {\r\n    this.setState({ timerOn: false, time: 0 });\r\n  }\r\n  componentDidMount() {\r\n    this.interval = setInterval(() => this.tick(), 1000);\r\n  }\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n  handleDelete() {\r\n    this.props.delete(this.props.num);\r\n  }\r\n  render() {\r\n    return (\r\n      <div\r\n        id={\"timer-\" + this.props.num}\r\n        className={\r\n          this.state.time >= this.props.timeLim && this.props.timeLim !== 0\r\n            ? \"timer-ex\"\r\n            : \"timer\"\r\n        }\r\n      >\r\n        <div id=\"timer-title\">\r\n          <h1 className=\"sitefont\">{\"Ajastin \" + this.props.num}</h1>\r\n        </div>\r\n        <div>\r\n          <h1 className=\"timer-time\">\r\n            {Math.floor(this.state.time / 3600) +\r\n              \":\" +\r\n              Math.floor((this.state.time % 3600) / 60) +\r\n              \":\" +\r\n              (this.state.time % 60)}\r\n          </h1>\r\n        </div>\r\n        <div className=\"timer-buttons\">\r\n          <h2 onClick={this.start} className=\"sitefont start timer-btn\">\r\n            Start\r\n          </h2>\r\n          <h2 onClick={this.stop} className=\"sitefont stop timer-btn\">\r\n            Stop\r\n          </h2>\r\n          <h2 onClick={this.restart} className=\"sitefont reset timer-btn\">\r\n            Reset\r\n          </h2>\r\n          <h2 onClick={this.handleDelete} className=\"sitefont delete timer-btn\">\r\n            Delete\r\n          </h2>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Timer;\r\n","import React, { Component } from \"react\";\nimport Timer from \"./timer.js\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      timeLim: 0,\n      timerList: [],\n      newId: 1,\n      showSettings: false\n    };\n    this.addTimer = this.addTimer.bind(this);\n    this.del = this.del.bind(this);\n    this.handleSettings = this.handleSettings.bind(this);\n  }\n  del(id) {\n    let tempList = this.state.timerList;\n    for (var i = 0; i < tempList.length; i++) {\n      if (tempList[i] === id) {\n        tempList.splice(i, 1);\n      }\n    }\n    this.setState({\n      timerList: tempList\n    });\n  }\n  addTimer() {\n    this.setState({\n      timerList: [...this.state.timerList, this.state.newId],\n      newId: this.state.newId + 1\n    });\n  }\n  handleSettings() {\n    this.setState({\n      showSettings: !this.state.showSettings\n    });\n  }\n  handleChange(event) {\n    if (event.target.value >= 0) {\n      this.setState({\n        timeLim: event.target.value\n      });\n    } else {\n      this.setState({\n        timeLim: 0\n      });\n    }\n  }\n  render() {\n    const timers = this.state.timerList.map(x => (\n      <Timer\n        delete={this.del}\n        key={x}\n        num={x}\n        timeLim={this.state.timeLim * 60}\n      />\n    ));\n    return (\n      <div>\n        <div id=\"top-bar\">\n          <h1 className=\"sitefont app-title\">\n            <i className=\"fas fa-stopwatch\" /> Kentt√§-timer\n          </h1>\n          <i\n            onClick={this.handleSettings}\n            className=\"settings-btn fas fa-cogs fa-3x\"\n          />\n        </div>\n        <div id=\"timers\">\n          {\" \"}\n          {this.state.showSettings && (\n            <div className=\"settings\">\n              <h1>Time limit</h1>\n              <input\n                value={this.state.timeLim}\n                onChange={this.handleChange.bind(this)}\n                type=\"number\"\n                className=\"numinput\"\n              />\n              <h3>(Insert time in minutes, use 0 for no limit)</h3>\n            </div>\n          )}\n          {timers}\n        </div>\n        <h1 className=\"sitefont add-timer\" onClick={this.addTimer}>\n          <i className=\"fas fa-plus-square\" /> Add timer\n        </h1>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}